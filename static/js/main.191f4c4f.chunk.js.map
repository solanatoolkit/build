{"version":3,"sources":["types.ts","utils/createTransferTransactionV0.ts","utils/detectPhantomMultiChainProvider.ts","constants.ts","utils/getChainData.ts","utils/getChainName.ts","utils/hexToRGB.ts","utils/numToHexString.ts","utils/pollEthereumTransactionReceipt.ts","utils/pollSolanaSignatureStatus.ts","utils/getEthereumSelectedAddress.ts","utils/sendTransactionOnEthereum.ts","utils/signAndSendTransactionOnSolana.ts","utils/signMessageOnEthereum.ts","utils/signMessageOnSolana.ts","utils/switchEthereumChain.ts","components/Button/index.tsx","components/Logs/Log.tsx","components/Logs/index.tsx","components/NoProvider/index.tsx","components/Sidebar/index.tsx","utils/connect.ts","utils/getEthereumChain.ts","utils/ensureEthereumChain.ts","App.tsx","utils/setupEvents.ts","index.tsx"],"names":["SupportedEVMChainIds","SupportedSolanaChainIds","SupportedChainNames","SupportedChainIcons","createTransferTransactionV0","publicKey","connection","getMinimumBalanceForRentExemption","minRent","getLatestBlockhash","then","res","blockhash","instructions","SystemProgram","transfer","fromPubkey","toPubkey","lamports","messageV0","TransactionMessage","payerKey","recentBlockhash","compileToV0Message","transactionV0","VersionedTransaction","detectPhantomMultiChainProvider","anyWindow","window","count","Promise","resolve","interval","setInterval","clearInterval","open","provider","phantom","ethereum","isPhantom","solana","PURPLE","WHITE","GRAY","REACT_GRAY","DARK_GRAY","LIGHT_GRAY","SUPPORTED_CHAINS","EthereumMainnet","name","icon","Ethereum","EthereumGoerli","PolygonMainnet","Polygon","PolygonMumbai","SolanaMainnet","Solana","SolanaTestnet","SolanaDevnet","getChainData","chainId","Error","getChainName","hexToRGB","hex","alpha","r","parseInt","slice","g","b","numToHexString","num","Number","toString","pollEthereumTransactionReceipt","txHash","createLog","providerType","status","method","message","messageTwo","request","params","txReceipt","blockNumber","pollSolanaSignatureStatus","signature","getSignatureStatus","value","confirmationStatus","hasReachedSufficientCommitment","charAt","toUpperCase","getEthereumSelectedAddress","address","sendTransactionOnEthereum","selectedAddress","transactionParameters","from","to","gas","console","warn","signAndSendTransactionOnSolana","transaction","signAndSendTransaction","signMessageOnEthereum","signedMessage","signMessageOnSolana","encodedMessage","TextEncoder","encode","signMessage","switchEthereumChain","response","Button","styled","button","Column","div","Row","StyledSpan","span","props","Method","p","Message","Log","React","memo","StyledSection","section","ClearLogsButton","PlaceholderMessage","Logs","connectedAccounts","logs","clearLogs","length","map","log","i","onClick","role","StyledMain","main","NoProvider","Main","Body","Link","a","attrs","href","target","rel","Subtitle","h5","Pre","pre","AccountRow","Badge","Divider","Tag","ChainIcon","img","height","ChainHeader","Sidebar","connectedMethods","connect","src","alt","width","toBase58","style","marginRight","borderRadius","filter","chain","marginTop","wasEthereumConnected","isConnected","onlyIfTrusted","silentlyConnect","solanaPubKey","getEthereumChain","Object","values","includes","ensureEthereumChain","StyledApp","solanaNetwork","clusterApiUrl","Connection","useProps","useState","setLogs","useCallback","undefined","setSelectedAddress","useEffect","f","useEthereumSelectedAddress","ethereumSelectedAddress","setEthereumSelectedAddress","on","newAccounts","setupEvents","disconnect","handleConnect","handleSignAndSendTransactionOnSolana","JSON","stringify","isEthereumChainIdReady","handleSendTransactionOnEthereum","handleSignMessageOnSolana","handleSignMessageOnEthereum","handleDisconnect","useMemo","StatelessApp","App","setProvider","getPhantomMultiChainProvider","phantomMultiChainProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.191f4c4f.chunk.js","sourcesContent":["import { PublicKey, SendOptions, Transaction, VersionedTransaction } from '@solana/web3.js';\r\n\r\ntype DisplayEncoding = 'utf8' | 'hex';\r\n\r\ntype SolanaEvent = 'connect' | 'disconnect' | 'accountChanged';\r\n\r\ntype EthereumEvent = 'connect' | 'disconnect' | 'accountsChanged' | 'chainChanged';\r\n\r\ntype SolanaRequestMethod =\r\n  | 'connect'\r\n  | 'disconnect'\r\n  | 'signAndSendTransaction'\r\n  | 'signTransaction'\r\n  | 'signAllTransactions'\r\n  | 'signMessage';\r\n\r\n/**\r\n * A subset of Phantom's supported JSON RPC methods\r\n * Phantom accepts most JSON RPC requests that are expected of wallets\r\n * For more information, please see: https://ethereum.org/en/developers/docs/apis/json-rpc/\r\n */\r\ntype EthereumRequestMethod =\r\n  | 'eth_getTransactionReceipt'\r\n  | 'eth_sendTransaction'\r\n  | 'eth_requestAccounts'\r\n  | 'personal_sign'\r\n  | 'eth_accounts'\r\n  | 'eth_chainId'\r\n  | 'wallet_switchEthereumChain';\r\n\r\ntype PhantomRequestMethod = SolanaRequestMethod | EthereumRequestMethod;\r\n\r\ninterface SolanaConnectOptions {\r\n  onlyIfTrusted: boolean;\r\n}\r\n\r\nexport interface PhantomSolanaProvider {\r\n  publicKey: PublicKey | null;\r\n  isConnected: boolean | null;\r\n  signAndSendTransaction: (\r\n    transaction: Transaction | VersionedTransaction,\r\n    opts?: SendOptions,\r\n  ) => Promise<{ signature: string; publicKey: PublicKey }>;\r\n  signTransaction: (transaction: Transaction | VersionedTransaction) => Promise<Transaction | VersionedTransaction>;\r\n  signAllTransactions: (\r\n    transactions: (Transaction | VersionedTransaction)[],\r\n  ) => Promise<(Transaction | VersionedTransaction)[]>;\r\n  signMessage: (message: Uint8Array | string, display?: DisplayEncoding) => Promise<any>;\r\n  connect: (opts?: Partial<SolanaConnectOptions>) => Promise<{ publicKey: PublicKey }>;\r\n  disconnect: () => Promise<void>;\r\n  on: (event: SolanaEvent, handler: (args: any) => void) => void;\r\n  request: (method: SolanaRequestMethod, params: any) => Promise<unknown>;\r\n}\r\n\r\n// TODO _events and _eventsCount\r\nexport interface PhantomEthereumProvider {\r\n  isMetaMask?: boolean; // will be removed after beta\r\n  isPhantom: boolean;\r\n  on: (event: EthereumEvent, handler: (args: any) => void) => void;\r\n  request: (args: { method: EthereumRequestMethod; params?: unknown[] | object }) => Promise<unknown>;\r\n  _metamask: {\r\n    isUnlocked: boolean;\r\n  };\r\n}\r\n\r\nexport interface PhantomInjectedProvider {\r\n  ethereum: PhantomEthereumProvider;\r\n  solana: PhantomSolanaProvider;\r\n}\r\n\r\nexport type PhantomProviderType = 'solana' | 'ethereum';\r\n\r\nexport type PhantomEvent = EthereumEvent | SolanaEvent;\r\n\r\nexport type Status = 'success' | 'warning' | 'error' | 'info';\r\n\r\nexport interface TLog {\r\n  providerType: PhantomProviderType;\r\n  status: Status;\r\n  method?: PhantomRequestMethod | Extract<PhantomEvent, 'accountChanged' | 'accountsChanged' | 'chainChanged'>;\r\n  message: string;\r\n  messageTwo?: string;\r\n}\r\n\r\nexport enum SupportedEVMChainIds {\r\n  EthereumMainnet = '0x1',\r\n  EthereumGoerli = '0x5',\r\n  PolygonMainnet = '0x89',\r\n  PolygonMumbai = '0x13881',\r\n}\r\n\r\nexport enum SupportedSolanaChainIds {\r\n  SolanaMainnet = 'solana:101',\r\n  SolanaTestnet = 'solana:102',\r\n  SolanaDevnet = 'solana:103',\r\n}\r\n\r\nexport enum SupportedChainNames {\r\n  EthereumMainnet = 'Ethereum Mainnet',\r\n  EthereumGoerli = 'Ethereum Goerli',\r\n  PolygonMainnet = 'Polygon Mainnet',\r\n  PolygonMumbai = 'Polygon Mumbai',\r\n  SolanaMainnet = 'Solana Mainnet Beta',\r\n  SolanaTestnet = 'Solana Testnet',\r\n  SolanaDevnet = 'Solana Devnet',\r\n}\r\n\r\nexport enum SupportedChainIcons {\r\n  Ethereum = '/images/ethereum.png',\r\n  Polygon = '/images/polygon.png',\r\n  Solana = '/images/solana.png',\r\n}\r\n","import { TransactionMessage, VersionedTransaction, SystemProgram, Connection, PublicKey } from '@solana/web3.js';\r\n\r\n/**\r\n * Creates an arbitrary transfer transactionV0 (Versioned Transaction)\r\n * @param   {String}      publicKey  a public key\r\n * @param   {Connection}  connection an RPC connection\r\n * @returns {VersionedTransaction}            a transactionV0\r\n */\r\nconst createTransferTransactionV0 = async (\r\n  publicKey: PublicKey,\r\n  connection: Connection\r\n): Promise<VersionedTransaction> => {\r\n  // connect to the cluster and get the minimum rent for rent exempt status\r\n  // perform this step to get an \"arbitrary\" amount to transfer\r\n  let minRent = await connection.getMinimumBalanceForRentExemption(0);\r\n\r\n  // get latest `blockhash`\r\n  let blockhash = await connection.getLatestBlockhash().then((res) => res.blockhash);\r\n\r\n  // create an array with your desired `instructions`\r\n  // in this case, just a transfer instruction\r\n  const instructions = [\r\n    SystemProgram.transfer({\r\n      fromPubkey: publicKey,\r\n      toPubkey: publicKey,\r\n      lamports: minRent,\r\n    }),\r\n  ];\r\n\r\n  // create v0 compatible message\r\n  const messageV0 = new TransactionMessage({\r\n    payerKey: publicKey,\r\n    recentBlockhash: blockhash,\r\n    instructions,\r\n  }).compileToV0Message();\r\n\r\n  // make a versioned transaction\r\n  const transactionV0 = new VersionedTransaction(messageV0);\r\n\r\n  return transactionV0;\r\n};\r\n\r\nexport default createTransferTransactionV0;\r\n","import { PhantomInjectedProvider } from '../types';\r\n\r\nconst POLLING_INTERVAL = 1000; // One second\r\nconst MAX_POLLS = 5;\r\n\r\n/**\r\n * Polls the `window` object for Phantom's ethereum and solana providers\r\n * @returns {Promise<PhantomInjectedProvider | null>} an object containing Phantom's ethereum and solana providers if they are found. Returns null if they are not found.\r\n */\r\nconst detectPhantomMultiChainProvider = async (): Promise<PhantomInjectedProvider | null> => {\r\n  const anyWindow: any = window;\r\n  let count = 0;\r\n\r\n  return new Promise((resolve) => {\r\n    const interval = setInterval(() => {\r\n      if (count === MAX_POLLS) {\r\n        clearInterval(interval);\r\n        resolve(null);\r\n        window.open('https://phantom.app/', '_blank');\r\n      }\r\n\r\n      const provider = anyWindow.phantom;\r\n      if (provider?.ethereum?.isPhantom && provider?.solana?.isPhantom) {\r\n        clearInterval(interval);\r\n        resolve(provider);\r\n      }\r\n      count++;\r\n    }, POLLING_INTERVAL);\r\n  });\r\n};\r\n\r\nexport default detectPhantomMultiChainProvider;\r\n","import { SupportedChainIcons, SupportedChainNames, SupportedEVMChainIds, SupportedSolanaChainIds } from './types';\r\n\r\n// =============================================================================\r\n// Colors\r\n// =============================================================================\r\nexport const RED = '#EB3742';\r\nexport const YELLOW = '#FFDC62';\r\nexport const GREEN = '#21E56F';\r\nexport const BLUE = '#59cff7';\r\nexport const PURPLE = '#8A81F8';\r\nexport const WHITE = '#FFFFFF';\r\nexport const GRAY = '#777777';\r\nexport const REACT_GRAY = '#222222';\r\nexport const DARK_GRAY = '#333333';\r\nexport const LIGHT_GRAY = '#444444';\r\nexport const BLACK = '#000000';\r\n\r\n// =============================================================================\r\n// Chains\r\n// =============================================================================\r\n\r\nexport const SUPPORTED_CHAINS = {\r\n  [SupportedEVMChainIds.EthereumMainnet]: {\r\n    name: SupportedChainNames.EthereumMainnet,\r\n    icon: SupportedChainIcons.Ethereum,\r\n  },\r\n  [SupportedEVMChainIds.EthereumGoerli]: {\r\n    name: SupportedChainNames.EthereumGoerli,\r\n    icon: SupportedChainIcons.Ethereum,\r\n  },\r\n  [SupportedEVMChainIds.PolygonMainnet]: {\r\n    name: SupportedChainNames.PolygonMainnet,\r\n    icon: SupportedChainIcons.Polygon,\r\n  },\r\n  [SupportedEVMChainIds.PolygonMumbai]: {\r\n    name: SupportedChainNames.PolygonMumbai,\r\n    icon: SupportedChainIcons.Polygon,\r\n  },\r\n  [SupportedSolanaChainIds.SolanaMainnet]: {\r\n    name: SupportedChainNames.SolanaMainnet,\r\n    icon: SupportedChainIcons.Solana,\r\n  },\r\n  [SupportedSolanaChainIds.SolanaTestnet]: {\r\n    name: SupportedChainNames.SolanaTestnet,\r\n    icon: SupportedChainIcons.Solana,\r\n  },\r\n  [SupportedSolanaChainIds.SolanaDevnet]: {\r\n    name: SupportedChainNames.SolanaDevnet,\r\n    icon: SupportedChainIcons.Solana,\r\n  },\r\n};\r\n","import { SUPPORTED_CHAINS } from '../constants';\r\nimport { SupportedChainIcons, SupportedChainNames, SupportedEVMChainIds } from '../types';\r\n\r\n/**\r\n * Returns a chain's name and icon if it supported by Phantom\r\n * @param chainId an EVM chain ID\r\n * @returns an object containing the chain's icon and a human-readable name\r\n */\r\nconst getChainData = (chainId: SupportedEVMChainIds): { name: SupportedChainNames; icon: SupportedChainIcons } => {\r\n  if (!SUPPORTED_CHAINS[chainId]) {\r\n    throw new Error(`Unsupported Chain ID: ${chainId}`);\r\n  }\r\n  return SUPPORTED_CHAINS[chainId];\r\n};\r\n\r\nexport default getChainData;\r\n","import { SupportedChainNames, SupportedEVMChainIds } from '../types';\r\nimport getChainData from './getChainData';\r\n\r\n/**\r\n * Returns a chain ID's name if it supported by Phantom\r\n * @param chainId an EVM chain ID\r\n * @returns a string representing the chain's human-readable name\r\n */\r\nconst getChainName = (chainId: SupportedEVMChainIds): SupportedChainNames => getChainData(chainId).name;\r\n\r\nexport default getChainName;\r\n","/**\r\n * Returns a color from a hex string and alpha numeric\r\n * @param   {String} hex   a hex string\r\n * @param   {Number} alpha an alpha numeric\r\n * @returns {String}       a formatted rgba\r\n */\r\nconst hexToRGB = (hex: string, alpha: number) => {\r\n  const r = parseInt(hex.slice(1, 3), 16);\r\n  const g = parseInt(hex.slice(3, 5), 16);\r\n  const b = parseInt(hex.slice(5, 7), 16);\r\n\r\n  return `rgba(${r},${g},${b},${alpha})`;\r\n};\r\n\r\nexport default hexToRGB;\r\n","/**\r\n * Returns a hex string from a number\r\n * @param   {Number} num   a number\r\n * @returns {String}       a hex string\r\n */\r\nconst numToHexString = (num: number) => {\r\n  return '0x' + Number(num).toString(16);\r\n};\r\n\r\nexport default numToHexString;\r\n","import { PhantomEthereumProvider, TLog } from '../types';\r\n\r\nconst POLLING_INTERVAL = 3000; // three seconds\r\nconst MAX_POLLS = 10;\r\n\r\ninterface TransactionReceipt {\r\n  blockHash: string;\r\n  blockNumber: string;\r\n  contractAddress: null;\r\n  cumulativeGasUsed: string;\r\n  effectiveGasPrice: string;\r\n  from: string;\r\n  gasUsed: string;\r\n  logs: any[];\r\n  logsBloom: string;\r\n  status: string;\r\n  to: string;\r\n  transactionHash: string;\r\n  transactionIndex: string;\r\n  type: string;\r\n}\r\n\r\n/**\r\n * Polls for transaction receipt\r\n * @param   {String}     txHash  a transaction hash\r\n * @param   {PhantomEthereumProvider} provider a Phantom ethereum provider\r\n * @param   {Function}   createLog  a function to create log\r\n * @returns\r\n */\r\nconst pollEthereumTransactionReceipt = async (\r\n  txHash: string,\r\n  provider: PhantomEthereumProvider,\r\n  createLog: (log: TLog) => void\r\n): Promise<void> => {\r\n  let count = 0;\r\n\r\n  const interval = setInterval(async () => {\r\n    // Failed to confirm transaction in time\r\n    if (count === MAX_POLLS) {\r\n      clearInterval(interval);\r\n      createLog({\r\n        providerType: 'ethereum',\r\n        status: 'error',\r\n        method: 'eth_sendTransaction',\r\n        message: `Transaction: ${txHash}`,\r\n        messageTwo: `Failed to confirm transaction within ${MAX_POLLS} seconds. The transaction may or may not have succeeded.`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // @ts-ignore:next-line\r\n    const txReceipt: TransactionReceipt = await provider.request({\r\n      method: 'eth_getTransactionReceipt',\r\n      params: [txHash],\r\n    });\r\n\r\n    if (!txReceipt) {\r\n      createLog({\r\n        providerType: 'ethereum',\r\n        status: 'info',\r\n        method: 'eth_sendTransaction',\r\n        message: `Transaction: ${txHash}`,\r\n        messageTwo: `Status: Waiting on confirmation...`,\r\n      });\r\n      count++;\r\n      return;\r\n    }\r\n\r\n    // @ts-ignore:next-line\r\n    const { status, blockNumber } = txReceipt;\r\n\r\n    // Transaction is confirmed\r\n    if (status === '0x1') {\r\n      createLog({\r\n        providerType: 'ethereum',\r\n        status: 'success',\r\n        method: 'eth_sendTransaction',\r\n        message: `Transaction: ${txHash}`,\r\n        messageTwo: `Status: Confirmed in block: ${parseInt(blockNumber)}`,\r\n      });\r\n      clearInterval(interval);\r\n      return;\r\n    } else {\r\n      createLog({\r\n        providerType: 'ethereum',\r\n        status: 'error',\r\n        method: 'eth_sendTransaction',\r\n        message: `Transaction: ${txHash}`,\r\n        messageTwo: `Status: Failed`,\r\n      });\r\n    }\r\n  }, POLLING_INTERVAL);\r\n};\r\n\r\nexport default pollEthereumTransactionReceipt;\r\n","import { Connection } from '@solana/web3.js';\r\n\r\nimport { TLog } from '../types';\r\n\r\nconst POLLING_INTERVAL = 1000; // one second\r\nconst MAX_POLLS = 30;\r\n\r\n/**\r\n * Polls for transaction signature statuses\r\n * @param   {String}     signature  a transaction signature\r\n * @param   {Connection} connection an RPC connection\r\n * @param   {Function}   createLog  a function to create log\r\n * @returns\r\n */\r\nconst pollSolanaSignatureStatus = async (\r\n  signature: string,\r\n  connection: Connection,\r\n  createLog: (log: TLog) => void\r\n): Promise<void> => {\r\n  let count = 0;\r\n\r\n  const interval = setInterval(async () => {\r\n    // Failed to confirm transaction in time\r\n    if (count === MAX_POLLS) {\r\n      clearInterval(interval);\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: 'error',\r\n        method: 'signAndSendTransaction',\r\n        message: `Transaction: ${signature}`,\r\n        messageTwo: `Failed to confirm transaction within ${MAX_POLLS} seconds. The transaction may or may not have succeeded.`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const { value } = await connection.getSignatureStatus(signature);\r\n    const confirmationStatus = value?.confirmationStatus;\r\n\r\n    if (confirmationStatus) {\r\n      const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\r\n\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: hasReachedSufficientCommitment ? 'success' : 'info',\r\n        method: 'signAndSendTransaction',\r\n        message: `Transaction: ${signature}`,\r\n        messageTwo: `Status: ${confirmationStatus.charAt(0).toUpperCase() + confirmationStatus.slice(1)}`,\r\n      });\r\n\r\n      if (hasReachedSufficientCommitment) {\r\n        clearInterval(interval);\r\n        return;\r\n      }\r\n    } else {\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: 'info',\r\n        method: 'signAndSendTransaction',\r\n        message: `Transaction: ${signature}`,\r\n        messageTwo: 'Status: Waiting on confirmation...',\r\n      });\r\n    }\r\n\r\n    count++;\r\n  }, POLLING_INTERVAL);\r\n};\r\n\r\nexport default pollSolanaSignatureStatus;\r\n","import { PhantomEthereumProvider } from '../types';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const getEthereumSelectedAddress = async (provider: PhantomEthereumProvider): Promise<string | undefined> => {\r\n  const [address] = await provider.request({ method: 'eth_accounts', params: [] }) as (Array<string> | []);\r\n  return address;\r\n};\r\n\r\nexport const useEthereumSelectedAddress = (provider: PhantomEthereumProvider) => {\r\n  const [selectedAddress, setSelectedAddress] = useState<string | undefined>(undefined);\r\n  useEffect(() => {\r\n    const f = async () => {\r\n      if (!provider) {\r\n        return;\r\n      }\r\n      const selectedAddress = await getEthereumSelectedAddress(provider);\r\n      setSelectedAddress(selectedAddress);\r\n    };\r\n    f();\r\n  }, [provider]);\r\n\r\n  return [selectedAddress, setSelectedAddress] as const;\r\n};","import { PhantomEthereumProvider } from '../types';\r\nimport numToHexString from './numToHexString';\r\nimport { getEthereumSelectedAddress } from './getEthereumSelectedAddress';\r\n\r\n/**\r\n * Sends a transaction of 1 wei to yourself\r\n * @param provider a Phantom ethereum provider\r\n * @returns a transaction hash\r\n */\r\nconst sendTransactionOnEthereum = async (provider: PhantomEthereumProvider): Promise<string> => {\r\n  try {\r\n    const selectedAddress = await getEthereumSelectedAddress(provider);\r\n    /**\r\n     * Required parameters for a simple transfer of 1 wei\r\n     * Phantom will automatically handle nonce & chainId.\r\n     * gasPrice will be handled by Phantom and customizable by end users during confirmation\r\n     */\r\n    const transactionParameters = {\r\n      from: selectedAddress, // must match user's active address\r\n      to: selectedAddress, // required except during contract publications\r\n      gas: numToHexString(30000), // the max amount of gas to be used in the tx\r\n      value: numToHexString(1), // only required when transferring ether. in this case, send 1 wei\r\n    };\r\n\r\n    const txHash = await provider.request({\r\n      method: 'eth_sendTransaction',\r\n      params: [transactionParameters],\r\n    });\r\n    if (typeof txHash === 'string') return txHash;\r\n    throw new Error('did not get back a transaction hash');\r\n  } catch (error) {\r\n    console.warn(error);\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport default sendTransactionOnEthereum;\r\n","import { Transaction, VersionedTransaction } from '@solana/web3.js';\r\n\r\nimport { PhantomSolanaProvider } from '../types';\r\n\r\n/**\r\n * Signs and sends transaction\r\n * @param   {PhantomSolanaProvider} provider    a Phantom solana provider\r\n * @param   {Transaction}     transaction a transaction to sign\r\n * @returns {Transaction}                 a signed transaction\r\n */\r\nconst signAndSendTransactionOnSolana = async (\r\n  provider: PhantomSolanaProvider,\r\n  transaction: Transaction | VersionedTransaction\r\n): Promise<string> => {\r\n  try {\r\n    const { signature } = await provider.signAndSendTransaction(transaction);\r\n    return signature;\r\n  } catch (error) {\r\n    console.warn(error);\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport default signAndSendTransactionOnSolana;\r\n","import { PhantomEthereumProvider } from '../types';\r\nimport { getEthereumSelectedAddress } from './getEthereumSelectedAddress';\r\n\r\n/**\r\n * Signs a message on Ethereum\r\n * @param provider a Phantom ethereum provider\r\n * @param message a message to sign\r\n * @returns a signed message is hex string format\r\n */\r\nconst signMessageOnEthereum = async (provider: PhantomEthereumProvider, message: string): Promise<string> => {\r\n  try {\r\n    const selectedAddress = await getEthereumSelectedAddress(provider);\r\n\r\n    const signedMessage = await provider.request({\r\n      method: 'personal_sign',\r\n      params: [message, selectedAddress],\r\n    });\r\n    if (typeof signedMessage === 'string') return signedMessage;\r\n    throw new Error('personal_sign did not respond with a signature');\r\n  } catch (error) {\r\n    console.warn(error);\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport default signMessageOnEthereum;\r\n","import { PhantomSolanaProvider } from '../types';\r\n\r\n/**\r\n * Signs a message on Solana\r\n * @param   {PhantomSolanaProvider} provider a Phantom Provider\r\n * @param   {String}          message  a message to sign\r\n * @returns {Any}                      TODO(get type)\r\n */\r\nconst signMessageOnSolana = async (provider: PhantomSolanaProvider, message: string): Promise<string> => {\r\n  try {\r\n    const encodedMessage = new TextEncoder().encode(message);\r\n    const signedMessage = await provider.signMessage(encodedMessage);\r\n    return signedMessage;\r\n  } catch (error) {\r\n    console.warn(error);\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport default signMessageOnSolana;\r\n","import { PhantomEthereumProvider, SupportedEVMChainIds } from '../types';\r\n\r\n/**\r\n * Switches the ethereum provider to a new chainId\r\n * @param provider a Phantom ethereum provider\r\n * @param chainId an EVM chainId to switch to\r\n * @returns null if successful\r\n */\r\nconst switchEthereumChain = async (\r\n  provider: PhantomEthereumProvider,\r\n  chainId: SupportedEVMChainIds\r\n): Promise<unknown> => {\r\n  try {\r\n    const response = await provider.request({\r\n      method: 'wallet_switchEthereumChain',\r\n      params: [{ chainId }],\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    console.warn(error);\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport default switchEthereumChain;\r\n","import styled from 'styled-components';\r\n\r\nimport { WHITE, DARK_GRAY, LIGHT_GRAY } from '../../constants';\r\n\r\nimport { hexToRGB } from '../../utils';\r\n\r\nconst Button = styled.button`\r\n  cursor: pointer;\r\n  width: 100%;\r\n  color: ${WHITE};\r\n  background-color: ${DARK_GRAY};\r\n  padding: 15px 10px;\r\n  font-weight: 600;\r\n  outline: 0;\r\n  border: 0;\r\n  border-radius: 6px;\r\n  user-select: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  &:hover {\r\n    background-color: ${hexToRGB(LIGHT_GRAY, 0.9)};\r\n  }\r\n  &:focus-visible&:not(:hover) {\r\n    background-color: ${hexToRGB(LIGHT_GRAY, 0.8)};\r\n  }\r\n  &:active {\r\n    background-color: ${LIGHT_GRAY};\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Status, TLog } from '../../types';\r\n\r\nimport { RED, YELLOW, GREEN, BLUE, PURPLE } from '../../constants';\r\n\r\n// =============================================================================\r\n// Styled Components\r\n// =============================================================================\r\n\r\nconst Column = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  line-height: 1.5;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyledSpan = styled.span<{ status: Status }>`\r\n  color: ${(props) => {\r\n    switch (props.status) {\r\n      case 'success':\r\n        return GREEN;\r\n      case 'warning':\r\n        return YELLOW;\r\n      case 'error':\r\n        return RED;\r\n      case 'info':\r\n        return BLUE;\r\n    }\r\n  }};\r\n  margin-right: 5px;\r\n`;\r\n\r\nconst Method = styled.p`\r\n  color: ${PURPLE};\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Message = styled.p`\r\n  overflow-wrap: break-word;\r\n`;\r\n\r\n// =============================================================================\r\n// Main Component\r\n// =============================================================================\r\n\r\nconst Log = React.memo((props: TLog) => (\r\n  <Column>\r\n    <Row>\r\n      <StyledSpan status={props.status}>\r\n        {'>'} {props.status}\r\n      </StyledSpan>\r\n      {props.providerType && <Method>{props.providerType}</Method>}\r\n      {props.method && <Method>[{props.method}]</Method>}\r\n    </Row>\r\n    <Message>{props.message}</Message>\r\n    {props.messageTwo && <Message>{props.messageTwo}</Message>}\r\n  </Column>\r\n));\r\n\r\nexport default Log;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { TLog } from '../../types';\r\n\r\nimport { BLACK, GRAY } from '../../constants';\r\n\r\nimport Button from '../Button';\r\nimport Log from './Log';\r\nimport { ConnectedAccounts } from '../../App';\r\n\r\n// =============================================================================\r\n// Styled Components\r\n// =============================================================================\r\n\r\nconst StyledSection = styled.section`\r\n  position: relative;\r\n  flex: 2;\r\n  padding: 20px;\r\n  background-color: ${BLACK};\r\n  overflow: auto;\r\n  font-family: monospace;\r\n`;\r\n\r\nconst ClearLogsButton = styled(Button)`\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 20px;\r\n  width: 100px;\r\n`;\r\n\r\nconst PlaceholderMessage = styled.p`\r\n  color: ${GRAY};\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  span {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\n// =============================================================================\r\n// Typedefs\r\n// =============================================================================\r\n\r\ninterface Props {\r\n  connectedAccounts: ConnectedAccounts;\r\n  logs: TLog[];\r\n  clearLogs: () => void;\r\n}\r\n\r\n// =============================================================================\r\n// Main Component\r\n// =============================================================================\r\n\r\nconst Logs = React.memo((props: Props) => {\r\n  const { connectedAccounts, logs, clearLogs } = props;\r\n  const { solana } = connectedAccounts;\r\n  return (\r\n    <StyledSection>\r\n      {logs.length > 0 ? (\r\n        <>\r\n          {logs.map((log, i) => (\r\n            <Log key={`${log.status}-${log.method}-${i}`} {...log} />\r\n          ))}\r\n          <ClearLogsButton onClick={clearLogs}>Clear Logs</ClearLogsButton>\r\n        </>\r\n      ) : (\r\n        <Row>\r\n          <span>{'>'}</span>\r\n          <PlaceholderMessage>\r\n            {solana ? (\r\n              // connected\r\n              <>\r\n                Click a button and watch magic happen...{' '}\r\n                <span role=\"img\" aria-label=\"Sparkles Emoji\">\r\n                  ✨\r\n                </span>\r\n              </>\r\n            ) : (\r\n              // not connected\r\n              <>\r\n                Welcome to the Phantom sandbox. Connect to your Phantom wallet and play around...{' '}\r\n                <span role=\"img\" aria-label=\"Ghost Emoji\">\r\n                  👻\r\n                </span>\r\n              </>\r\n            )}\r\n          </PlaceholderMessage>\r\n        </Row>\r\n      )}\r\n    </StyledSection>\r\n  );\r\n});\r\n\r\nexport default Logs;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { REACT_GRAY } from '../../constants';\r\n\r\n// =============================================================================\r\n// Styled Components\r\n// =============================================================================\r\n\r\nconst StyledMain = styled.main`\r\n  padding: 20px;\r\n  height: 100vh;\r\n  background-color: ${REACT_GRAY};\r\n`;\r\n\r\n// =============================================================================\r\n// Main Component\r\n// =============================================================================\r\n\r\n// TODO: @PHANTOM-TEAM: Let's improve this UI\r\nconst NoProvider = () => {\r\n  return (\r\n    <StyledMain>\r\n      <h2>Could not find a provider</h2>\r\n    </StyledMain>\r\n  );\r\n};\r\n\r\nexport default NoProvider;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { DARK_GRAY, GRAY, PURPLE, REACT_GRAY, WHITE } from '../../constants';\r\nimport { hexToRGB } from '../../utils';\r\nimport Button from '../Button';\r\nimport { ConnectedAccounts, ConnectedMethods } from '../../App';\r\nimport { SupportedChainIcons, SupportedChainNames, SupportedEVMChainIds } from '../../types';\r\n\r\n// =============================================================================\r\n// Styled Components\r\n// =============================================================================\r\n\r\nconst Main = styled.main`\r\n  position: relative;\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 20px;\r\n  align-items: center;\r\n  background-color: ${REACT_GRAY};\r\n\r\n  > * {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    height: auto;\r\n  }\r\n`;\r\n\r\nconst Body = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  button {\r\n    margin-bottom: 15px;\r\n  }\r\n`;\r\n\r\nconst Link = styled.a.attrs({\r\n  href: 'https://phantom.app/',\r\n  target: '_blank',\r\n  rel: 'noopener noreferrer',\r\n})`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  text-decoration: none;\r\n  margin-bottom: 15px;\r\n  // margin-bottom: 30px;\r\n  padding: 5px;\r\n\r\n  &:focus-visible {\r\n    outline: 2px solid ${hexToRGB(GRAY, 0.5)};\r\n    border-radius: 6px;\r\n  }\r\n`;\r\n\r\nconst Subtitle = styled.h5`\r\n  color: ${GRAY};\r\n  font-weight: 400;\r\n`;\r\n\r\nconst Pre = styled.pre`\r\n  margin-bottom: 5px;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst AccountRow = styled.div`\r\n  display: flex;\r\n  margin-bottom: 8px;\r\n\r\n  :last-of-type {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n\r\nconst Badge = styled.div`\r\n  margin: 0;\r\n  padding: 10px;\r\n  width: 100%;\r\n  color: ${PURPLE};\r\n  background-color: ${hexToRGB(PURPLE, 0.2)};\r\n  font-size: 14px;\r\n  border-radius: 0 6px 6px 0;\r\n  @media (max-width: 400px) {\r\n    width: 280px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n  @media (max-width: 320px) {\r\n    width: 220px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n\r\n  ::selection {\r\n    color: ${WHITE};\r\n    background-color: ${hexToRGB(PURPLE, 0.5)};\r\n  }\r\n\r\n  ::-moz-selection {\r\n    color: ${WHITE};\r\n    background-color: ${hexToRGB(PURPLE, 0.5)};\r\n  }\r\n`;\r\n\r\nconst Divider = styled.div`\r\n  border: 1px solid ${DARK_GRAY};\r\n  height: 1px;\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst Tag = styled.p`\r\n  text-align: center;\r\n  color: ${GRAY};\r\n\r\n  a {\r\n    color: ${PURPLE};\r\n    text-decoration: none;\r\n\r\n    ::selection {\r\n      color: ${WHITE};\r\n      background-color: ${hexToRGB(PURPLE, 0.5)};\r\n    }\r\n\r\n    ::-moz-selection {\r\n      color: ${WHITE};\r\n      background-color: ${hexToRGB(PURPLE, 0.5)};\r\n    }\r\n  }\r\n\r\n  @media (max-width: 320px) {\r\n    font-size: 14px;\r\n  }\r\n\r\n  ::selection {\r\n    color: ${WHITE};\r\n    background-color: ${hexToRGB(PURPLE, 0.5)};\r\n  }\r\n\r\n  ::-moz-selection {\r\n    color: ${WHITE};\r\n    background-color: ${hexToRGB(PURPLE, 0.5)};\r\n  }\r\n`;\r\n\r\nconst ChainIcon = styled.img`\r\n  height: ${(props) => props.height};\r\n  width: ${(props) => props.height};\r\n  border-radius: 6px 0 0 6px;\r\n`;\r\n\r\nconst ChainHeader = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  margin: 5px 0 10px;\r\n`;\r\n\r\n// =============================================================================\r\n// Typedefs\r\n// =============================================================================\r\n\r\ninterface Props {\r\n  connectedMethods: ConnectedMethods[];\r\n  connectedAccounts: ConnectedAccounts;\r\n  connect: () => Promise<void>;\r\n}\r\n\r\n// =============================================================================\r\n// Main Component\r\n// =============================================================================\r\nconst Sidebar = React.memo((props: Props) => {\r\n  const { connectedAccounts, connectedMethods, connect } = props;\r\n  return (\r\n    <Main>\r\n      <Body>\r\n        <Link>\r\n          <img src=\"https://phantom.app/img/phantom-logo.svg\" alt=\"Phantom\" width=\"200\" />\r\n          <Subtitle>Multi-chain Sandbox</Subtitle>\r\n        </Link>\r\n        {connectedAccounts?.solana ? (\r\n          // connected\r\n          <>\r\n            <div>\r\n              <Pre>Connected as</Pre>\r\n              <AccountRow>\r\n                <ChainIcon src={SupportedChainIcons.Ethereum} height=\"36px\" />\r\n                <Badge>{connectedAccounts?.ethereum}</Badge>\r\n              </AccountRow>\r\n              <AccountRow>\r\n                <ChainIcon src={SupportedChainIcons.Polygon} height=\"36px\" />\r\n                <Badge>{connectedAccounts?.ethereum}</Badge>\r\n              </AccountRow>\r\n              <AccountRow>\r\n                <ChainIcon src={SupportedChainIcons.Solana} height=\"36px\" />\r\n                <Badge>{connectedAccounts?.solana?.toBase58()}</Badge>\r\n              </AccountRow>\r\n              <Divider />\r\n            </div>\r\n            <ChainHeader>\r\n              <ChainIcon\r\n                src={SupportedChainIcons.Ethereum}\r\n                height=\"16px\"\r\n                style={{ marginRight: '6px', borderRadius: '6px' }}\r\n              />\r\n              <Tag>{SupportedChainNames.EthereumGoerli}</Tag>\r\n            </ChainHeader>\r\n            {connectedMethods\r\n              .filter((method) => method.chain === 'ethereum')\r\n              .map((method, i) => (\r\n                <Button\r\n                  data-test-id={`ethereum-goerli-${method.name}`}\r\n                  key={`${method.name}-${i}`}\r\n                  onClick={() => method.onClick(SupportedEVMChainIds.EthereumGoerli)}\r\n                >\r\n                  {method.name}\r\n                </Button>\r\n              ))}\r\n            <ChainHeader>\r\n              <ChainIcon\r\n                src={SupportedChainIcons.Polygon}\r\n                height=\"16px\"\r\n                style={{ marginRight: '6px', borderRadius: '6px' }}\r\n              />\r\n              <Tag>{SupportedChainNames.PolygonMumbai}</Tag>\r\n            </ChainHeader>\r\n            {connectedMethods\r\n              .filter((method) => method.chain === 'ethereum')\r\n              .map((method, i) => (\r\n                <Button\r\n                  data-test-id={`polygon-mumbai-${method.name}`}\r\n                  key={`${method.name}-${i}`}\r\n                  onClick={() => method.onClick(SupportedEVMChainIds.PolygonMumbai)}\r\n                >\r\n                  {method.name}\r\n                </Button>\r\n              ))}\r\n            <ChainHeader>\r\n              <ChainIcon\r\n                src={SupportedChainIcons.Solana}\r\n                height=\"16px\"\r\n                style={{ marginRight: '6px', borderRadius: '6px' }}\r\n              />\r\n              <Tag>{SupportedChainNames.SolanaDevnet}</Tag>\r\n            </ChainHeader>\r\n            {connectedMethods\r\n              .filter((method) => method.chain === 'solana')\r\n              .map((method, i) => (\r\n                <Button data-test-id={`solana-${method.name}`} key={`${method.name}-${i}`} onClick={method.onClick}>\r\n                  {method.name}\r\n                </Button>\r\n              ))}\r\n          </>\r\n        ) : (\r\n          // not connected\r\n          <Button data-testid=\"connect-to-phantom\" onClick={connect} style={{ marginTop: '15px' }}>\r\n            Connect to Phantom\r\n          </Button>\r\n        )}\r\n      </Body>\r\n      {/* 😊 💕  */}\r\n      <Tag>\r\n        Made with{' '}\r\n        <span role=\"img\" aria-label=\"Red Heart Emoji\">\r\n          ❤️\r\n        </span>{' '}\r\n        by the <a href=\"https://phantom.app\">Phantom</a> team\r\n      </Tag>\r\n    </Main>\r\n  );\r\n});\r\n\r\nexport default Sidebar;\r\n","import { PhantomInjectedProvider, TLog } from '../types';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { getEthereumSelectedAddress } from './getEthereumSelectedAddress';\r\n\r\n// MULTI-CHAIN PROVIDER TIP: Connect using the ethereum provider first for the best experience\r\n// use onlyIfTrusted on the solana connect request, so we don't double pop up.\r\nexport const connect = async ({ solana, ethereum }: PhantomInjectedProvider, createLog: (log: TLog) => void) => {\r\n  let wasEthereumConnected: boolean | undefined;\r\n  try {\r\n    wasEthereumConnected = !!(await getEthereumSelectedAddress(ethereum));\r\n    if (!wasEthereumConnected) {\r\n      await ethereum.request({ method: 'eth_requestAccounts' });\r\n    }\r\n  } catch (error) {\r\n    createLog({\r\n      providerType: 'ethereum',\r\n      status: 'error',\r\n      method: 'eth_requestAccounts',\r\n      message: error.message,\r\n    });\r\n  }\r\n\r\n  try {\r\n    if (!wasEthereumConnected && !solana.isConnected) {\r\n      // If ethereum was not connected then we would have showed the EVM pop up, so we should not show the solana pop up.\r\n      await solana.connect({ onlyIfTrusted: true });\r\n    } else if (wasEthereumConnected && !solana.isConnected) {\r\n      // If ethereum was already connected, then we should show the pop up because the solana provider is not connected.\r\n      await solana.connect();\r\n    }\r\n  } catch (error) {\r\n    createLog({\r\n      providerType: 'solana',\r\n      status: 'error',\r\n      method: 'connect',\r\n      message: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Similar to solana.connect({onlyIfTrusted: true}) but for multi-chain\r\n// MULTI-CHAIN PROVIDER TIP: Must use the solana provider first, and only the call eth provider if the solana call is successful\r\nexport const silentlyConnect = async (\r\n  { solana, ethereum }: PhantomInjectedProvider,\r\n  createLog: (log: TLog) => void\r\n) => {\r\n  let solanaPubKey: { publicKey: PublicKey } | undefined;\r\n  try {\r\n    solanaPubKey = await solana.connect({ onlyIfTrusted: true });\r\n  } catch (error) {\r\n    createLog({\r\n      providerType: 'solana',\r\n      status: 'error',\r\n      method: 'connect',\r\n      message: 'encountered error while silent connecting: ' + error.message,\r\n    });\r\n  }\r\n\r\n  if (solanaPubKey) {\r\n    try {\r\n      await ethereum.request({ method: 'eth_requestAccounts' });\r\n    } catch (error) {\r\n      createLog({\r\n        providerType: 'ethereum',\r\n        status: 'error',\r\n        method: 'eth_requestAccounts',\r\n        message: 'encountered error while silent connecting: ' + error.message,\r\n      });\r\n    }\r\n  }\r\n};\r\n","import { PhantomEthereumProvider, SupportedEVMChainIds } from '../types';\r\nimport { useEffect, useState } from 'react';\r\n\r\n/**\r\n * getes the ethereum provider to a new chainId\r\n * @param provider a Phantom ethereum provider\r\n * @param chainId an EVM chainId to get to\r\n * @returns null if successful\r\n */\r\nconst getEthereumChain = async (\r\n  provider: PhantomEthereumProvider,\r\n): Promise<SupportedEVMChainIds> => {\r\n  try {\r\n    const chainId = await provider.request({\r\n      method: 'eth_chainId',\r\n      params: [],\r\n    });\r\n    if (!Object.values(SupportedEVMChainIds).includes(chainId as SupportedEVMChainIds)) {\r\n      throw new Error('got unexpected chain ID:' + chainId);\r\n    }\r\n    return chainId as SupportedEVMChainIds;\r\n  } catch (error) {\r\n    console.warn(error);\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const useEthereumChainIdState = (provider: PhantomEthereumProvider | null) => {\r\n  const [chainId, setChainId] = useState<SupportedEVMChainIds | undefined>(undefined);\r\n  useEffect(() => {\r\n    const f = async () => {\r\n      if (!provider) {\r\n        return;\r\n      }\r\n      const curChainId = await getEthereumChain(provider);\r\n      setChainId(curChainId);\r\n    };\r\n    f();\r\n  }, [provider]);\r\n\r\n  return [chainId, setChainId] as const;\r\n};\r\n\r\nexport default getEthereumChain;\r\n","// Switches chain to the requested chain ID if necessary, rejects if unsuccessful.\r\nimport { PhantomEthereumProvider, SupportedEVMChainIds, TLog } from '../types';\r\nimport getEthereumChain from './getEthereumChain';\r\nimport switchEthereumChain from './switchEthereumChain';\r\n\r\nexport const ensureEthereumChain = async (\r\n  provider: PhantomEthereumProvider,\r\n  chainId: SupportedEVMChainIds,\r\n  createLog: (log: TLog) => void\r\n): Promise<boolean> => {\r\n  const curChainId = await getEthereumChain(provider);\r\n  if (curChainId === chainId) {\r\n    return true;\r\n  }\r\n\r\n  try {\r\n    await switchEthereumChain(provider, chainId);\r\n    return true;\r\n  } catch (error) {\r\n    createLog({\r\n      providerType: 'ethereum',\r\n      status: 'error',\r\n      method: 'wallet_switchEthereumChain',\r\n      message: error.message,\r\n    });\r\n    return false;\r\n  }\r\n};\r\n","/**\r\n * @DEV: If the sandbox is throwing dependency errors, chances are you need to clear your browser history.\r\n * This will trigger a re-install of the dependencies in the sandbox – which should fix things right up.\r\n * Alternatively, you can fork this sandbox to refresh the dependencies manually.\r\n */\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { clusterApiUrl, Connection, PublicKey } from '@solana/web3.js';\r\n\r\nimport {\r\n  createTransferTransactionV0,\r\n  detectPhantomMultiChainProvider,\r\n  getChainName,\r\n  pollEthereumTransactionReceipt,\r\n  pollSolanaSignatureStatus,\r\n  sendTransactionOnEthereum,\r\n  signAndSendTransactionOnSolana,\r\n  signMessageOnEthereum,\r\n  signMessageOnSolana,\r\n} from './utils';\r\n\r\nimport { PhantomInjectedProvider, SupportedEVMChainIds, TLog } from './types';\r\n\r\nimport { Logs, NoProvider, Sidebar } from './components';\r\nimport { connect, silentlyConnect } from './utils/connect';\r\nimport { setupEvents } from './utils/setupEvents';\r\nimport { ensureEthereumChain } from './utils/ensureEthereumChain';\r\nimport { useEthereumSelectedAddress } from './utils/getEthereumSelectedAddress';\r\n\r\n// =============================================================================\r\n// Styled Components\r\n// =============================================================================\r\n\r\nconst StyledApp = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: 100vh;\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\n// =============================================================================\r\n// Constants\r\n// =============================================================================\r\n\r\nconst solanaNetwork = clusterApiUrl('devnet');\r\n// NB: This URL will only work for Phantom sandbox apps! Please do not use this for your project. If you are running this locally we recommend using one of Solana's public RPC endpoints\r\n// const solanaNetwork = 'https://phantom-phantom-f0ad.mainnet.rpcpool.com/';\r\nconst connection = new Connection(solanaNetwork);\r\nconst message = 'To avoid digital dognappers, sign below to authenticate with CryptoCorgis.';\r\n\r\n// =============================================================================\r\n// Typedefs\r\n// =============================================================================\r\n\r\nexport type ConnectedAccounts = {\r\n  solana: PublicKey | null;\r\n  ethereum: string | null;\r\n};\r\n\r\nexport type ConnectedMethods =\r\n  | {\r\n      chain: string;\r\n      name: string;\r\n      onClick: (props?: any) => Promise<string>;\r\n    }\r\n  | {\r\n      chain: string;\r\n      name: string;\r\n      onClick: (chainId?: any) => Promise<void | boolean>;\r\n    };\r\n\r\ninterface Props {\r\n  connectedAccounts: ConnectedAccounts;\r\n  connectedMethods: ConnectedMethods[];\r\n  handleConnect: () => Promise<void>;\r\n  logs: TLog[];\r\n  clearLogs: () => void;\r\n}\r\n\r\n// =============================================================================\r\n// Hooks\r\n// =============================================================================\r\n/**\r\n * @DEVELOPERS\r\n * The fun stuff!\r\n */\r\nconst useProps = (provider: PhantomInjectedProvider | null): Props => {\r\n  /** Logs to display in the Sandbox console */\r\n  const [logs, setLogs] = useState<TLog[]>([]);\r\n\r\n  const createLog = useCallback(\r\n    (log: TLog) => {\r\n      return setLogs((logs) => [...logs, log]);\r\n    },\r\n    [setLogs]\r\n  );\r\n\r\n  const clearLogs = useCallback(() => {\r\n    setLogs([]);\r\n  }, [setLogs]);\r\n\r\n  const [ethereumSelectedAddress, setEthereumSelectedAddress] = useEthereumSelectedAddress(provider?.ethereum);\r\n\r\n  /** Side effects to run once providers are detected */\r\n  useEffect(() => {\r\n    if (!provider) return;\r\n    const { solana, ethereum } = provider;\r\n\r\n    // attempt to eagerly connect on initial startup\r\n    silentlyConnect({ solana, ethereum }, createLog);\r\n    setupEvents({ solana, ethereum }, createLog, setEthereumSelectedAddress);\r\n\r\n    return () => {\r\n      solana.disconnect();\r\n    };\r\n  }, [provider, createLog, setEthereumSelectedAddress]);\r\n\r\n  /** Connect to both Solana and Ethereum Providers */\r\n  const handleConnect = useCallback(async () => {\r\n    if (!provider) return;\r\n    const { solana, ethereum } = provider;\r\n\r\n    await connect({ solana, ethereum }, createLog);\r\n\r\n    // Immediately switch to Ethereum Goerli for Sandbox purposes\r\n    await ensureEthereumChain(ethereum, SupportedEVMChainIds.EthereumGoerli, createLog);\r\n  }, [provider, createLog]);\r\n\r\n  /** SignAndSendTransaction via Solana Provider */\r\n  const handleSignAndSendTransactionOnSolana = useCallback(async () => {\r\n    if (!provider) return;\r\n    const { solana } = provider;\r\n    try {\r\n      // create a v0 transaction\r\n      const transactionV0 = await createTransferTransactionV0(solana.publicKey, connection);\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: 'info',\r\n        method: 'signAndSendTransaction',\r\n        message: `Requesting signature for ${JSON.stringify(transactionV0)}`,\r\n      });\r\n      // sign and submit the transaction via Phantom\r\n      const signature = await signAndSendTransactionOnSolana(solana, transactionV0);\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: 'info',\r\n        method: 'signAndSendTransaction',\r\n        message: `Signed and submitted transaction ${signature}.`,\r\n      });\r\n      // poll tx status until it is confirmed or 30 seconds pass\r\n      pollSolanaSignatureStatus(signature, connection, createLog);\r\n    } catch (error) {\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: 'error',\r\n        method: 'signAndSendTransaction',\r\n        message: error.message,\r\n      });\r\n    }\r\n  }, [provider, createLog]);\r\n\r\n  /**\r\n   * Switch Ethereum Chains\r\n   * When a user connects to a dApp, Phantom considers them connected on all chains\r\n   * When the Ethereum provider's chainId is changed, Phantom will not prompt the user for approval\r\n   * */\r\n  const isEthereumChainIdReady = useCallback(\r\n    async (chainId: SupportedEVMChainIds) => {\r\n      if (!provider) return false;\r\n      const { ethereum } = provider;\r\n      return await ensureEthereumChain(ethereum, chainId, createLog);\r\n    },\r\n    [provider, createLog]\r\n  );\r\n\r\n  /** SendTransaction via Ethereum Provider */\r\n  const handleSendTransactionOnEthereum = useCallback(\r\n    async (chainId) => {\r\n      // set ethereum provider to the correct chainId\r\n      const ready = await isEthereumChainIdReady(chainId);\r\n      if (!ready) return;\r\n      const { ethereum } = provider;\r\n      try {\r\n        // send the transaction up to the network\r\n        const txHash = await sendTransactionOnEthereum(ethereum);\r\n        createLog({\r\n          providerType: 'ethereum',\r\n          status: 'info',\r\n          method: 'eth_sendTransaction',\r\n          message: `Sending transaction ${txHash} on ${chainId ? getChainName(chainId) : 'undefined'}`,\r\n        });\r\n        // poll tx status until it is confirmed in a block, fails, or 30 seconds pass\r\n        pollEthereumTransactionReceipt(txHash, ethereum, createLog);\r\n      } catch (error) {\r\n        createLog({\r\n          providerType: 'ethereum',\r\n          status: 'error',\r\n          method: 'eth_sendTransaction',\r\n          message: error.message,\r\n        });\r\n      }\r\n    },\r\n    [provider, createLog, isEthereumChainIdReady]\r\n  );\r\n\r\n  // /** SignMessage via Solana Provider */\r\n  const handleSignMessageOnSolana = useCallback(async () => {\r\n    if (!provider) return;\r\n    const { solana } = provider;\r\n    try {\r\n      const signedMessage = await signMessageOnSolana(solana, message);\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: 'success',\r\n        method: 'signMessage',\r\n        message: `Message signed: ${JSON.stringify(signedMessage)}`,\r\n      });\r\n      return signedMessage;\r\n    } catch (error) {\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: 'error',\r\n        method: 'signMessage',\r\n        message: error.message,\r\n      });\r\n    }\r\n  }, [provider, createLog]);\r\n\r\n  /** SignMessage via Ethereum Provider */\r\n  const handleSignMessageOnEthereum = useCallback(\r\n    async (chainId) => {\r\n      // set ethereum provider to the correct chainId\r\n      const ready = await isEthereumChainIdReady(chainId);\r\n      if (!ready) return;\r\n      const { ethereum } = provider;\r\n      try {\r\n        const signedMessage = await signMessageOnEthereum(ethereum, message);\r\n        createLog({\r\n          providerType: 'ethereum',\r\n          status: 'success',\r\n          method: 'personal_sign',\r\n          message: `Message signed: ${signedMessage}`,\r\n        });\r\n        return signedMessage;\r\n      } catch (error) {\r\n        createLog({\r\n          providerType: 'ethereum',\r\n          status: 'error',\r\n          method: 'personal_sign',\r\n          message: error.message,\r\n        });\r\n      }\r\n    },\r\n    [provider, createLog, isEthereumChainIdReady]\r\n  );\r\n\r\n  /**\r\n   * Disconnect from Solana\r\n   * At this time, there is no way to programmatically disconnect from Ethereum\r\n   * MULTI-CHAIN PROVIDER TIP: You can only disconnect on the solana provider. But after when disconnecting your should use the\r\n   * multi-chain connect method to reconnect.\r\n   */\r\n  const handleDisconnect = useCallback(async () => {\r\n    if (!provider) return;\r\n    const { solana } = provider;\r\n    try {\r\n      await solana.disconnect();\r\n    } catch (error) {\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: 'error',\r\n        method: 'disconnect',\r\n        message: error.message,\r\n      });\r\n    }\r\n  }, [provider, createLog]);\r\n\r\n  const connectedMethods = useMemo(() => {\r\n    return [\r\n      {\r\n        chain: 'solana',\r\n        name: 'Sign and Send Transaction',\r\n        onClick: handleSignAndSendTransactionOnSolana,\r\n      },\r\n      {\r\n        chain: 'ethereum',\r\n        name: 'Send Transaction',\r\n        onClick: handleSendTransactionOnEthereum,\r\n      },\r\n      {\r\n        chain: 'solana',\r\n        name: 'Sign Message',\r\n        onClick: handleSignMessageOnSolana,\r\n      },\r\n      {\r\n        chain: 'ethereum',\r\n        name: 'Sign Message',\r\n        onClick: handleSignMessageOnEthereum,\r\n      },\r\n      {\r\n        chain: 'solana',\r\n        name: 'Disconnect',\r\n        onClick: handleDisconnect,\r\n      },\r\n    ];\r\n  }, [\r\n    handleSignAndSendTransactionOnSolana,\r\n    handleSendTransactionOnEthereum,\r\n    handleSignMessageOnSolana,\r\n    handleSignMessageOnEthereum,\r\n    handleDisconnect,\r\n  ]);\r\n\r\n  return {\r\n    connectedAccounts: {\r\n      solana: provider?.solana?.publicKey,\r\n      ethereum: ethereumSelectedAddress,\r\n    },\r\n    connectedMethods,\r\n    handleConnect,\r\n    logs,\r\n    clearLogs,\r\n  };\r\n};\r\n\r\n// =============================================================================\r\n// Stateless Component\r\n// =============================================================================\r\n\r\nconst StatelessApp = React.memo((props: Props) => {\r\n  const { connectedAccounts, connectedMethods, handleConnect, logs, clearLogs } = props;\r\n\r\n  return (\r\n    <StyledApp>\r\n      <Sidebar connectedAccounts={connectedAccounts} connectedMethods={connectedMethods} connect={handleConnect} />\r\n      <Logs connectedAccounts={connectedAccounts} logs={logs} clearLogs={clearLogs} />\r\n    </StyledApp>\r\n  );\r\n});\r\n\r\n// =============================================================================\r\n// Main Component\r\n// =============================================================================\r\n\r\nconst App = () => {\r\n  const [provider, setProvider] = useState<PhantomInjectedProvider | null>(null);\r\n  const props = useProps(provider);\r\n\r\n  useEffect(() => {\r\n    const getPhantomMultiChainProvider = async () => {\r\n      const phantomMultiChainProvider = await detectPhantomMultiChainProvider();\r\n      setProvider(phantomMultiChainProvider);\r\n    };\r\n    getPhantomMultiChainProvider();\r\n  }, []);\r\n\r\n  if (!provider) {\r\n    return <NoProvider />;\r\n  }\r\n\r\n  return <StatelessApp {...props} />;\r\n};\r\n\r\nexport default App;\r\n","import { PhantomInjectedProvider, SupportedEVMChainIds, TLog } from '../types';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { getChainName } from './index';\r\nimport { silentlyConnect } from './connect';\r\n\r\nexport function setupEvents(\r\n  { solana, ethereum }: PhantomInjectedProvider,\r\n  createLog: (log: TLog) => void,\r\n  setEthereumSelectedAddress: (address: string) => void\r\n) {\r\n  // handle solana `connect` event\r\n  solana.on('connect', (publicKey: PublicKey) => {\r\n    createLog({\r\n      providerType: 'solana',\r\n      status: 'success',\r\n      method: 'connect',\r\n      message: `Connected to account ${publicKey.toBase58()}`,\r\n    });\r\n  });\r\n\r\n  // handle solana `disconnect` event\r\n  solana.on('disconnect', () => {\r\n    createLog({\r\n      providerType: 'solana',\r\n      status: 'warning',\r\n      method: 'disconnect',\r\n      message: '👋 Goodbye',\r\n    });\r\n  });\r\n\r\n  // handle solana accountChanged event\r\n  solana.on('accountChanged', (publicKey: PublicKey | null) => {\r\n    // if we're still connected, Phantom will pass the publicKey of the new account\r\n    if (publicKey) {\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: 'info',\r\n        method: 'accountChanged',\r\n        message: `Switched to account ${publicKey.toBase58()}`,\r\n      });\r\n    } else {\r\n      /**\r\n       * In this case dApps could...\r\n       *\r\n       * 1. Not do anything\r\n       * 2. Only re-connect to the new account if it is trusted\r\n       * 3. Always attempt to reconnect (NOT RECOMMENDED) MULTI-CHAIN PROVIDER TIP\r\n       */\r\n      createLog({\r\n        providerType: 'solana',\r\n        status: 'info',\r\n        method: 'accountChanged',\r\n        message: 'Attempting to switch accounts.',\r\n      });\r\n      // attempt to reconnect silently\r\n      silentlyConnect({ solana, ethereum }, createLog);\r\n    }\r\n  });\r\n\r\n  // handle ethereum `accountsChanged` event\r\n  // connecting, account switching, and disconnecting are all handled via this event\r\n  ethereum.on('accountsChanged', (newAccounts: string[]) => {\r\n    // if we're still connected, Phantom will return an array with 1 account\r\n    if (newAccounts.length > 0) {\r\n      setEthereumSelectedAddress(newAccounts[0]);\r\n      createLog({\r\n        providerType: 'ethereum',\r\n        status: 'info',\r\n        method: 'accountsChanged',\r\n        message: `Switched to account ${newAccounts[0]}`,\r\n      });\r\n    } else {\r\n      /**\r\n       * In this case dApps could...\r\n       *\r\n       * 1. Not do anything\r\n       * 2. Always attempt to reconnect (NOT RECOMMENDED) MULTI-CHAIN PROVIDER TIP\r\n       */\r\n      createLog({\r\n        providerType: 'ethereum',\r\n        status: 'warning',\r\n        method: 'accountsChanged',\r\n        message: `Could not detect new account`,\r\n      });\r\n    }\r\n  });\r\n\r\n  // handle ethereum chainChanged event\r\n  ethereum.on('chainChanged', (chainId: SupportedEVMChainIds) => {\r\n    createLog({\r\n      providerType: 'ethereum',\r\n      status: 'info',\r\n      method: 'chainChanged',\r\n      message: `Switched to ${getChainName(chainId)} (Chain ID: ${chainId})`,\r\n    });\r\n  });\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}